name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-2019]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-2019
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-2019
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: cuda-toolkit
      # You may pin to the exact commit or the version. uses: Jimver/cuda-toolkit@dc0ca7bb29c5a92f7a963d3d5c93f8d59765136a
      uses: Jimver/cuda-toolkit@v0.2.14
      id: cuda-toolkit
      with:
        sub-packages: '["nvcc"]'
        method: 'network'

    - run: echo "Installed cuda version is:${{ steps.cuda-toolkit.outputs.cuda }}"
    - run: echo "Cuda install location:${{ steps.cuda-toolkit.outputs.CUDA_PATH }}"
    - run: nvcc -V

    - name: Retrive GDAL
      run:   |
         if [ "$RUNNER_OS" == "Linux" ]; then
              add-apt-repository ppa:ubuntugis/ppa -y
              apt-get update
              apt-get install libgdal-dev
         elif [ "$RUNNER_OS" == "Windows" ]; then
              curl -o osgeo4w-setup.exe https://download.osgeo.org/osgeo4w/v2/osgeo4w-setup.exe
         else
              echo "$RUNNER_OS not supported"
              exit 1
         fi

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
              
